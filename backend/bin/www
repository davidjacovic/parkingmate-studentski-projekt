#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('backend:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3002');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);


// Dodaj socket.io
const socketIo = require('socket.io');
const io = socketIo(server, {
  cors: { origin: "*" }, // ili podesiti za tvoju frontend adresu
});

// Middleware za autentifikaciju tokena preko socket.io
io.use((socket, next) => {
  const token = socket.handshake.auth.token;
  if (!token) {
    return next(new Error("Unauthorized"));
  }
  // Validiraj token, npr jwt.verify(token, SECRET, ...)
  socket.user = { userId: "pretpostavimo" };
  next();
});

const PaymentModel = require('../models/paymentModel');

io.on('connection', (socket) => {
  console.log('Novi klijent povezan:', socket.id, 'User:', socket.user.userId);

  async function sendActivePayments() {
    try {
      const payments = await PaymentModel.find({
        user: socket.user.userId,
        payment_status: 'completed',
        hidden: false,
      }).lean();

      const now = Date.now();
      const paymentsWithExpires = payments.map(p => {
        const expiresAt = new Date(p.date).getTime() + p.duration * 60 * 60 * 1000;
        return {
          vehiclePlate: p.vehicle_plate,
          expiresAt,
          amount: p.amount,
          date: p.date,
        };
      }).filter(p => p.expiresAt > now);

      socket.emit('activePayments', paymentsWithExpires);
    } catch (err) {
      console.error('Greška pri dohvatu aktivnih plaćanja:', err);
    }
  }

  sendActivePayments();

  socket.on('paymentMade', (paymentData) => {
    io.to(socket.id).emit('newPayment', paymentData);
  });

  socket.on('disconnect', () => {
    console.log('Klijent se odjavio:', socket.id);
  });
});

var port = normalizePort(process.env.PORT || '3002');
app.set('port', port);

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
