PROGRAM ::= DECLARATIONS CITY_BLOCK
DECLARATIONS ::= LET | epsilon
CITY_BLOCK ::= city CITY
CITY ::= identifier BODY semicolumn
BODY ::= lcurly ELEMENTS rcurly
ELEMENTS ::= ELEMENT ELEMENTS_TAIL
ELEMENTS_TAIL ::= ELEMENT ELEMENTS_TAIL | epsilon
ELEMENT ::= DECLARATIONS BLOCK
BLOCK ::= BLOCK_TYPE_WID identifier lcurly BLOCK_STATEMENT_LIST rcurly semicolumn | tree lcurly BLOCK_STATEMENT_LIST rcurly semicolumn | junction lcurly BLOCK_STATEMENT_LIST rcurly semicolumn
BLOCK_STATEMENT_LIST ::= BLOCK_STATEMENT BLOCK_STATEMENT_LIST | epsilon
BLOCK_STATEMENT ::= DECLARATIONS COMMAND
BLOCK_TYPE_WID ::= building | park | road | river | marker | parking
COMMAND ::= COMMAND_TYPE PARAMETER
PARAMETER ::= lparen ARGUMENTS rparen semicolumn
ARGUMENTS ::= ARGUMENT ARGUMENTS_TAIL
ARGUMENTS_TAIL ::= comma ARGUMENT ARGUMENTS_TAIL | epsilon
COMMAND_TYPE ::= line | bend | box | circ | polyline | mark
ARGUMENT ::= ADDITIVE
ADDITIVE ::= MULTIPLICATIVE ADDITIVE_PRIM
ADDITIVE_PRIM ::= plus MULTIPLICATIVE ADDITIVE_PRIM | minus MULTIPLICATIVE ADDITIVE_PRIM | epsilon
MULTIPLICATIVE ::= UNARY MULTIPLICATIVE_PRIM
MULTIPLICATIVE_PRIM ::= times UNARY MULTIPLICATIVE_PRIM | divide UNARY MULTIPLICATIVE_PRIM | epsilon
UNARY ::= plus PRIMARY | minus PRIMARY | PRIMARY
PRIMARY ::= real_num | variable | lparen ADDITIVE rparen | int
LET ::= SYNTAX VALUE_TYPE semicolumn
VALUE_TYPE ::= new lparen ARGUMENT comma ARGUMENT rparen | ARGUMENT
SYNTAX ::= let variable assign